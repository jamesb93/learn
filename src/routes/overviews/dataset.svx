---
title: Understanding the DataSet
blurb: |
    The DataSet (fluid.dataset~ / fluid.dataset / FluidDataSet) is the heart of the second FluCoMa toolbox. This overview dives into how it works and how you can feel more fluent when using it.
tags: 
    - data
    - beginner
---

<script>
    import CodeBlock from '$lib/components/CodeBlock.svelte';
    import Image from '$lib/components/Image.svelte';
    import { Tabs, TabList, TabPanel, Tab } from '$lib/components/tabs/tabs';
</script>

## Introduction

The [DataSet](/reference/dataset) is a core object in the second FluCoMa toolbox as it deals mostly with machine learning algorithms. Whenever there is a need to store data as an input or an output to a process, [DataSet](/reference/dataset) is the tool that you'll want to reach for. Fundamentally, [DataSet](/reference/dataset) is an _associative data structure_ and while this bundle of words might seem confusing at first, it is possible that you're already familiar with the idea by using other objects such as `coll`, `dict`, `text` or `Dictionary` which are all associative. 

Associatve in this context means that data is not stored in a structure that requires a specific order like an `array` or `list`. Rather, data is stored in an unordered collection that can be referencedÂ and queried by looking up an _identifier_ that is associated to some data. Together, these two bits of information are called a _point_. Identifiers can be numbers, strings or symbols, so it's relatively flexible in what it might denote. This facilitates relatively simple retrieval, updating and deletion of information in a [DataSet](/reference/dataset) by structuring our interaction with it around _named points_. Furthermore, when data is transformed and passed between many instances of FluCoMa objects, the identifiers are preserved meaning one can backtrack results from the end to the beginning of a processing pipeline.

## Some Examples

### Adding Points

First let's start with a few ways to add points to a [DataSet](/reference/dataset).

<Tabs>
<TabList>
    <Tab>Max</Tab>
    <Tab>PureData</Tab>
    <Tab>SuperCollider</Tab>
</TabList>
<TabPanel> <!-- Max -->
<a href='/examples/dataset/simple-storage.maxpat' download>Download Patch</a>
</TabPanel>

<TabPanel> <!-- Pure Data -->
<a href='/examples/batch/simple-storage.pd' download>Download Patch</a>
</TabPanel> 

<TabPanel> <!-- SC -->
<CodeBlock>

```js
// Add a single point
(
s.reboot; // reboot the server
s.waitForBoot({ // wait for the server to finish booting
    var data = Buffer.loadCollection(s, [1, 2, 3]); // create a new buffer containing the values 1, 2, 3
    var ds = FluidDataSet.new(s); // create a new dataset stored in the variable "ds"
    s.sync; // synchronise the server
    
    ds.addPoint("id", data); // Add the contents of the buffer "data" to "ds" by associating it to the identifier called "id"
    ds.print; // print the contents of "ds"
});
)

// Add multiple points iteratively
(
s.reboot; // reboot the server
s.waitForBoot({ // wait for the server to finish booting
    var ds = FluidDataSet.new(s); // create a new dataset stored in the variable "ds"
    s.sync;
    
    50.do({
        arg i;
        var data = Buffer.loadCollection(s, Array.rand(3, 1, 10)); // create a new buffer containing 3 random values
        s.sync; // synchronise the server
    
        ds.addPoint(i, data); // Add the contents of the buffer "data" to "ds" by associating it to the identifier called "id"
    });
    ds.print; // print the contents of "ds"
});
)
```

</CodeBlock>
</TabPanel> 
</Tabs>

### Updating Points

### Deleteing Points

### Dictionary Interface
















